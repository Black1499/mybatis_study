<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lzx.generator.dao.EcsBackGoodsMapper">
  <resultMap id="BaseResultMap" type="com.lzx.generator.model.EcsBackGoods">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="rec_id" jdbcType="INTEGER" property="recId" />
    <result column="back_id" jdbcType="INTEGER" property="backId" />
    <result column="goods_id" jdbcType="INTEGER" property="goodsId" />
    <result column="product_id" jdbcType="INTEGER" property="productId" />
    <result column="product_sn" jdbcType="VARCHAR" property="productSn" />
    <result column="goods_name" jdbcType="VARCHAR" property="goodsName" />
    <result column="brand_name" jdbcType="VARCHAR" property="brandName" />
    <result column="goods_sn" jdbcType="VARCHAR" property="goodsSn" />
    <result column="is_real" jdbcType="BIT" property="isReal" />
    <result column="send_number" jdbcType="SMALLINT" property="sendNumber" />
    <result column="back_type" jdbcType="BIT" property="backType" />
    <result column="parent_id" jdbcType="INTEGER" property="parentId" />
    <result column="back_goods_price" jdbcType="DECIMAL" property="backGoodsPrice" />
    <result column="back_goods_number" jdbcType="SMALLINT" property="backGoodsNumber" />
    <result column="status_back" jdbcType="BIT" property="statusBack" />
    <result column="status_refund" jdbcType="BIT" property="statusRefund" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.lzx.generator.model.EcsBackGoods">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="goods_attr" jdbcType="LONGVARCHAR" property="goodsAttr" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    rec_id, back_id, goods_id, product_id, product_sn, goods_name, brand_name, goods_sn, 
    is_real, send_number, back_type, parent_id, back_goods_price, back_goods_number, 
    status_back, status_refund
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    goods_attr
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.lzx.generator.model.EcsBackGoodsExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ecs_back_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.lzx.generator.model.EcsBackGoodsExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ecs_back_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ecs_back_goods
    where rec_id = #{recId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from ecs_back_goods
    where rec_id = #{recId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lzx.generator.model.EcsBackGoodsExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from ecs_back_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lzx.generator.model.EcsBackGoods">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into ecs_back_goods (rec_id, back_id, goods_id, 
      product_id, product_sn, goods_name, 
      brand_name, goods_sn, is_real, 
      send_number, back_type, parent_id, 
      back_goods_price, back_goods_number, status_back, 
      status_refund, goods_attr)
    values (#{recId,jdbcType=INTEGER}, #{backId,jdbcType=INTEGER}, #{goodsId,jdbcType=INTEGER}, 
      #{productId,jdbcType=INTEGER}, #{productSn,jdbcType=VARCHAR}, #{goodsName,jdbcType=VARCHAR}, 
      #{brandName,jdbcType=VARCHAR}, #{goodsSn,jdbcType=VARCHAR}, #{isReal,jdbcType=BIT}, 
      #{sendNumber,jdbcType=SMALLINT}, #{backType,jdbcType=BIT}, #{parentId,jdbcType=INTEGER}, 
      #{backGoodsPrice,jdbcType=DECIMAL}, #{backGoodsNumber,jdbcType=SMALLINT}, #{statusBack,jdbcType=BIT}, 
      #{statusRefund,jdbcType=BIT}, #{goodsAttr,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.lzx.generator.model.EcsBackGoods">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into ecs_back_goods
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="recId != null">
        rec_id,
      </if>
      <if test="backId != null">
        back_id,
      </if>
      <if test="goodsId != null">
        goods_id,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="productSn != null">
        product_sn,
      </if>
      <if test="goodsName != null">
        goods_name,
      </if>
      <if test="brandName != null">
        brand_name,
      </if>
      <if test="goodsSn != null">
        goods_sn,
      </if>
      <if test="isReal != null">
        is_real,
      </if>
      <if test="sendNumber != null">
        send_number,
      </if>
      <if test="backType != null">
        back_type,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="backGoodsPrice != null">
        back_goods_price,
      </if>
      <if test="backGoodsNumber != null">
        back_goods_number,
      </if>
      <if test="statusBack != null">
        status_back,
      </if>
      <if test="statusRefund != null">
        status_refund,
      </if>
      <if test="goodsAttr != null">
        goods_attr,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="recId != null">
        #{recId,jdbcType=INTEGER},
      </if>
      <if test="backId != null">
        #{backId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null">
        #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="productSn != null">
        #{productSn,jdbcType=VARCHAR},
      </if>
      <if test="goodsName != null">
        #{goodsName,jdbcType=VARCHAR},
      </if>
      <if test="brandName != null">
        #{brandName,jdbcType=VARCHAR},
      </if>
      <if test="goodsSn != null">
        #{goodsSn,jdbcType=VARCHAR},
      </if>
      <if test="isReal != null">
        #{isReal,jdbcType=BIT},
      </if>
      <if test="sendNumber != null">
        #{sendNumber,jdbcType=SMALLINT},
      </if>
      <if test="backType != null">
        #{backType,jdbcType=BIT},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="backGoodsPrice != null">
        #{backGoodsPrice,jdbcType=DECIMAL},
      </if>
      <if test="backGoodsNumber != null">
        #{backGoodsNumber,jdbcType=SMALLINT},
      </if>
      <if test="statusBack != null">
        #{statusBack,jdbcType=BIT},
      </if>
      <if test="statusRefund != null">
        #{statusRefund,jdbcType=BIT},
      </if>
      <if test="goodsAttr != null">
        #{goodsAttr,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lzx.generator.model.EcsBackGoodsExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from ecs_back_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update ecs_back_goods
    <set>
      <if test="record.recId != null">
        rec_id = #{record.recId,jdbcType=INTEGER},
      </if>
      <if test="record.backId != null">
        back_id = #{record.backId,jdbcType=INTEGER},
      </if>
      <if test="record.goodsId != null">
        goods_id = #{record.goodsId,jdbcType=INTEGER},
      </if>
      <if test="record.productId != null">
        product_id = #{record.productId,jdbcType=INTEGER},
      </if>
      <if test="record.productSn != null">
        product_sn = #{record.productSn,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsName != null">
        goods_name = #{record.goodsName,jdbcType=VARCHAR},
      </if>
      <if test="record.brandName != null">
        brand_name = #{record.brandName,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsSn != null">
        goods_sn = #{record.goodsSn,jdbcType=VARCHAR},
      </if>
      <if test="record.isReal != null">
        is_real = #{record.isReal,jdbcType=BIT},
      </if>
      <if test="record.sendNumber != null">
        send_number = #{record.sendNumber,jdbcType=SMALLINT},
      </if>
      <if test="record.backType != null">
        back_type = #{record.backType,jdbcType=BIT},
      </if>
      <if test="record.parentId != null">
        parent_id = #{record.parentId,jdbcType=INTEGER},
      </if>
      <if test="record.backGoodsPrice != null">
        back_goods_price = #{record.backGoodsPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.backGoodsNumber != null">
        back_goods_number = #{record.backGoodsNumber,jdbcType=SMALLINT},
      </if>
      <if test="record.statusBack != null">
        status_back = #{record.statusBack,jdbcType=BIT},
      </if>
      <if test="record.statusRefund != null">
        status_refund = #{record.statusRefund,jdbcType=BIT},
      </if>
      <if test="record.goodsAttr != null">
        goods_attr = #{record.goodsAttr,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update ecs_back_goods
    set rec_id = #{record.recId,jdbcType=INTEGER},
      back_id = #{record.backId,jdbcType=INTEGER},
      goods_id = #{record.goodsId,jdbcType=INTEGER},
      product_id = #{record.productId,jdbcType=INTEGER},
      product_sn = #{record.productSn,jdbcType=VARCHAR},
      goods_name = #{record.goodsName,jdbcType=VARCHAR},
      brand_name = #{record.brandName,jdbcType=VARCHAR},
      goods_sn = #{record.goodsSn,jdbcType=VARCHAR},
      is_real = #{record.isReal,jdbcType=BIT},
      send_number = #{record.sendNumber,jdbcType=SMALLINT},
      back_type = #{record.backType,jdbcType=BIT},
      parent_id = #{record.parentId,jdbcType=INTEGER},
      back_goods_price = #{record.backGoodsPrice,jdbcType=DECIMAL},
      back_goods_number = #{record.backGoodsNumber,jdbcType=SMALLINT},
      status_back = #{record.statusBack,jdbcType=BIT},
      status_refund = #{record.statusRefund,jdbcType=BIT},
      goods_attr = #{record.goodsAttr,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update ecs_back_goods
    set rec_id = #{record.recId,jdbcType=INTEGER},
      back_id = #{record.backId,jdbcType=INTEGER},
      goods_id = #{record.goodsId,jdbcType=INTEGER},
      product_id = #{record.productId,jdbcType=INTEGER},
      product_sn = #{record.productSn,jdbcType=VARCHAR},
      goods_name = #{record.goodsName,jdbcType=VARCHAR},
      brand_name = #{record.brandName,jdbcType=VARCHAR},
      goods_sn = #{record.goodsSn,jdbcType=VARCHAR},
      is_real = #{record.isReal,jdbcType=BIT},
      send_number = #{record.sendNumber,jdbcType=SMALLINT},
      back_type = #{record.backType,jdbcType=BIT},
      parent_id = #{record.parentId,jdbcType=INTEGER},
      back_goods_price = #{record.backGoodsPrice,jdbcType=DECIMAL},
      back_goods_number = #{record.backGoodsNumber,jdbcType=SMALLINT},
      status_back = #{record.statusBack,jdbcType=BIT},
      status_refund = #{record.statusRefund,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lzx.generator.model.EcsBackGoods">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update ecs_back_goods
    <set>
      <if test="backId != null">
        back_id = #{backId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null">
        goods_id = #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="productSn != null">
        product_sn = #{productSn,jdbcType=VARCHAR},
      </if>
      <if test="goodsName != null">
        goods_name = #{goodsName,jdbcType=VARCHAR},
      </if>
      <if test="brandName != null">
        brand_name = #{brandName,jdbcType=VARCHAR},
      </if>
      <if test="goodsSn != null">
        goods_sn = #{goodsSn,jdbcType=VARCHAR},
      </if>
      <if test="isReal != null">
        is_real = #{isReal,jdbcType=BIT},
      </if>
      <if test="sendNumber != null">
        send_number = #{sendNumber,jdbcType=SMALLINT},
      </if>
      <if test="backType != null">
        back_type = #{backType,jdbcType=BIT},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="backGoodsPrice != null">
        back_goods_price = #{backGoodsPrice,jdbcType=DECIMAL},
      </if>
      <if test="backGoodsNumber != null">
        back_goods_number = #{backGoodsNumber,jdbcType=SMALLINT},
      </if>
      <if test="statusBack != null">
        status_back = #{statusBack,jdbcType=BIT},
      </if>
      <if test="statusRefund != null">
        status_refund = #{statusRefund,jdbcType=BIT},
      </if>
      <if test="goodsAttr != null">
        goods_attr = #{goodsAttr,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where rec_id = #{recId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.lzx.generator.model.EcsBackGoods">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update ecs_back_goods
    set back_id = #{backId,jdbcType=INTEGER},
      goods_id = #{goodsId,jdbcType=INTEGER},
      product_id = #{productId,jdbcType=INTEGER},
      product_sn = #{productSn,jdbcType=VARCHAR},
      goods_name = #{goodsName,jdbcType=VARCHAR},
      brand_name = #{brandName,jdbcType=VARCHAR},
      goods_sn = #{goodsSn,jdbcType=VARCHAR},
      is_real = #{isReal,jdbcType=BIT},
      send_number = #{sendNumber,jdbcType=SMALLINT},
      back_type = #{backType,jdbcType=BIT},
      parent_id = #{parentId,jdbcType=INTEGER},
      back_goods_price = #{backGoodsPrice,jdbcType=DECIMAL},
      back_goods_number = #{backGoodsNumber,jdbcType=SMALLINT},
      status_back = #{statusBack,jdbcType=BIT},
      status_refund = #{statusRefund,jdbcType=BIT},
      goods_attr = #{goodsAttr,jdbcType=LONGVARCHAR}
    where rec_id = #{recId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lzx.generator.model.EcsBackGoods">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update ecs_back_goods
    set back_id = #{backId,jdbcType=INTEGER},
      goods_id = #{goodsId,jdbcType=INTEGER},
      product_id = #{productId,jdbcType=INTEGER},
      product_sn = #{productSn,jdbcType=VARCHAR},
      goods_name = #{goodsName,jdbcType=VARCHAR},
      brand_name = #{brandName,jdbcType=VARCHAR},
      goods_sn = #{goodsSn,jdbcType=VARCHAR},
      is_real = #{isReal,jdbcType=BIT},
      send_number = #{sendNumber,jdbcType=SMALLINT},
      back_type = #{backType,jdbcType=BIT},
      parent_id = #{parentId,jdbcType=INTEGER},
      back_goods_price = #{backGoodsPrice,jdbcType=DECIMAL},
      back_goods_number = #{backGoodsNumber,jdbcType=SMALLINT},
      status_back = #{statusBack,jdbcType=BIT},
      status_refund = #{statusRefund,jdbcType=BIT}
    where rec_id = #{recId,jdbcType=INTEGER}
  </update>
</mapper>